# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Loy0qOnB01ZMUNyQ86JvXCff8YvFSr-G
"""

import pandas as pd
import tabula
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk

# 特定のキーワード（工事区分・工種・種別・細別）を含むか確認する関数
def contains_keywords(df, keywords):
    for keyword in keywords:
        if df.apply(lambda row: row.astype(str).str.contains(keyword).any(), axis=1).any():
            return True
    return False

# アプリケーションのメインウィンドウ
class PDFExtractorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("PDF Data Extractor")
        self.root.geometry("600x400")

        # ファイル選択ボタン
        self.select_button = tk.Button(self.root, text="Select PDF", command=self.select_pdf)
        self.select_button.pack(pady=20)

        # 処理開始ボタン
        self.process_button = tk.Button(self.root, text="Process PDF", command=self.process_pdf, state=tk.DISABLED)
        self.process_button.pack(pady=20)

        # 結果表示用のTreeview
        self.tree = ttk.Treeview(self.root)
        self.tree.pack(pady=20, fill=tk.BOTH, expand=True)

        # 初期化
        self.pdf_path = None

    def select_pdf(self):
        """ファイル選択ダイアログを開き、PDFを選択"""
        self.pdf_path = filedialog.askopenfilename(filetypes=[("PDF Files", "*.pdf")])
        if self.pdf_path:
            self.process_button.config(state=tk.NORMAL)

    def process_pdf(self):
        """PDFの処理を実行"""
        if not self.pdf_path:
            messagebox.showerror("Error", "Please select a PDF file.")
            return

        # PDFからデータを抽出
        try:
            dfs = tabula.read_pdf(self.pdf_path, lattice=True, pages='1-100', guess=True)
        except Exception as e:
            messagebox.showerror("Error", f"Error reading the PDF: {e}")
            return

        # 結合対象のキーワード
        keywords = ["工事区分"]
        df_combined = pd.DataFrame()

        text = None  # 変数 text を定義

        for i, df in enumerate(dfs):
            # 列名を数字の連番に変更
            df.columns = range(df.shape[1])

            # 欠損値を前後の値で埋める
            df.ffill(inplace=True)

            # 「工事区分」が含まれているかを確認
            if contains_keywords(df, keywords):
                if i == 1:  # 2回目の繰り返し
                    text = df.iloc[0, 4]  # 1行目5列目の文字列を取得

                # 結合
                df_combined = pd.concat([df_combined, df], ignore_index=True)

        if df_combined.empty:
            messagebox.showinfo("Info", "No data found with the specified keyword.")
            return

        # 結果を表示
        self.display_result(df_combined)

        # 結果表示用のテキストボックスに2回目の繰り返しで取得した文字列を表示
        messagebox.showinfo("Extracted Text", f"Text from 2nd iteration (row 1, column 5): {text}")

    def display_result(self, df):
        """処理結果をTreeviewに表示"""
        for column in df.columns:
            self.tree.heading(column, text=str(column))

        # 既存のデータを削除
        for row in self.tree.get_children():
            self.tree.delete(row)

        # データをTreeviewに追加
        for _, row in df.iterrows():
            self.tree.insert("", tk.END, values=list(row))

# アプリケーションの起動
if __name__ == "__main__":
    root = tk.Tk()
    app = PDFExtractorApp(root)
    root.mainloop()